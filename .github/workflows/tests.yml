name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      is_release:
        description: "Set to true if a release version."
        required: false
        default: false
        type: boolean
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: false
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z[-alphaN | -betaN | -rcN | -devN | -postN]"
        required: false
        default: ""
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string
      wheels_run_id:
        description: "The workflow run ID of a build_wheels workflow run.  Set if wanting to use wheels from an already completed run."
        required: false
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: false
        default: ""
        type: string
  workflow_call:
    inputs:
      is_release:
        description: "Set to true if a release version."
        required: false
        default: false
        type: boolean
      sha:
        description: "The git SHA to use for release.  Only set if needing to publish"
        required: false
        default: ""
        type: string
      version:
        description: "The Release version.  Allowed format: x.y.z[-alphaN | -betaN | -rcN | -devN | -postN]"
        required: false
        default: ""
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string
      wheels_run_id:
        description: "The workflow run ID of a build_wheels workflow run.  Set if wanting to use wheels from an already completed run."
        required: false
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: false
        default: ""
        type: string


env:
  DEFAULT_PYTHON: "3.8"


jobs:
  validate-input:
    runs-on: ubuntu-22.04
    steps:
      - name: If release, verify SHA is provided
        if: inputs.is_release && inputs.sha == ''
        run: |
          echo "::error If releasing, must provide a SHA."
          exit 1
      - name: If release, verify SHA is correct length
        if: inputs.is_release && inputs.sha != ''
        run: |
          echo '"${{ inputs.sha }}"' | jq -e '. | length == 40'
      - name: If release, verify version is provided
        if: inputs.is_release && inputs.version == ''
        run: |
          echo "::error If releasing, must provide a version."
          exit 1
      - name: Validate host
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_HOST == ''}}
        run: |
          echo "::error must provide PYCBCC_HOST."
          exit 1
      - name: Validate user
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_USERNAME == '' }}
        run: |
          echo "::error must provide PYCBCC_USERNAME."
          exit 1
      - name: Validate password
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_PASSWORD == '' }}
        run: |
          echo "::error must provide PYCBCC_PASSWORD."
          exit 1


  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt
          python -m pip install pre-commit
      - name: Set SDK version
        run: |
          git config user.name "Couchbase SDK Team"
          git config user.email "sdk_dev@couchbase.com"
          git tag -a 1.0.0-dev0 -m "Release of client version 1.0.0-dev0"
          python couchbase_columnar_version.py --mode make
      - name: Run pre-commit
        run: pre-commit run --all-files


  build-wheels:
    needs: lint
    if: ${{ inputs.wheels_run_id == '' }}
    uses: ./.github/workflows/build_wheels.yml
    with:
      is_release: ${{ inputs.is_release && inputs.is_release || false }}
      sha: ${{ inputs.sha && inputs.sha || '' }}
      version: ${{ inputs.version && inputs.version || '' }}
      cxx_change: ${{ inputs.cxx_change && inputs.cxx_change || '' }}


  test-setup:
    runs-on: ubuntu-22.04
    needs: [validate-input, lint, build-wheels]
    if: |
      always()
      && needs.lint.result == 'success'
      && needs.validate-input.result == 'success'
      && (needs.build-wheels.result == 'success' || needs.build-wheels.result == 'skipped')
    steps:
      - name: Checkout (with SHA)
        if: inputs.sha != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout (no SHA)
        if: inputs.sha == ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup test environment
        run: |
          mkdir pycbcc_test
          mkdir -p pycbcc_test/acb/tests
          mkdir -p pycbcc_test/cb/tests
          mkdir -p pycbcc_test/tests
          cp -r acouchbase_columnar/tests/*.py pycbcc_test/acb/tests
          cp -r couchbase_columnar/tests/*.py pycbcc_test/cb/tests
          cp -r tests/** pycbcc_test/tests
          touch pycbcc_test/acb/__init__.py
          touch pycbcc_test/cb/__init__.py
          sed "s/couchbase_columnar\/tests/cb\/tests/g; s/== 'couchbase_columnar'/== 'cb'/; s/== 'acouchbase_columnar'/== 'acb'/;" conftest.py > pycbcc_test/conftest.py
          cd pycbcc_test
          echo "pycbcc_test contents"
          ls -alh
          echo "acb/tests contents"
          ls -alh acb/tests
          echo "cb/tests contents"
          ls -alh cb/tests
          echo "tests contents"
          ls -alh tests
          echo "conftest.py contents"
          cat conftest.py
          rm -f pytest.ini
          cat > pytest.ini <<EOF
          [pytest]
          minversion = 7.0
          testpaths = tests acb/tests cb/tests
          python_classes = *Tests
          python_files = *_t.py
          markers =
            pycbcc_couchbase: marks a test for the couchbase API (deselect with '-m \"not pycbcc_couchbase\"')
            pycbcc_acouchbase: marks a test for the acouchbase API (deselect with '-m \"not pycbcc_acouchbase\"')
            pycbcc_unit: marks a test as a unit test
            pycbcc_integration: marks a test as an integration test
          EOF
          cat > dev_reqs.txt <<EOF
          typing-extensions~=4.11; python_version<"3.11"
          pytest~=7.4
          pytest-asyncio~=0.21,>=0.21.2,<0.22
          pytest-rerunfailures~=13.0
          EOF
          echo "pycbcc_test contents"
          ls -alh
          echo "pytest.ini contents"
          cat pytest.ini
      - name: Setup Python
        if: ${{ inputs.test_input != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Build test_config.ini
        if: ${{ inputs.test_input != '' }}
        run: |
          export $(echo '${{ inputs.test_input }}' | jq -r '. | to_entries[] | join("=")')
          echo "Output environment"
          env | grep PYCBCC
          curl -o build_test_config.py ${CI_SCRIPTS_URL}/ci_scripts/build_test_config.py
          python build_test_config.py
          echo "Output test_config.ini"
          cat test_config.ini
          mv test_config.ini pycbcc_test/tests
          echo "pycbcc_test contents"
          ls -alh pycbcc_test/tests
        env:
          CI_SCRIPTS_URL: "https://raw.githubusercontent.com/couchbaselabs/sdkbuild-jenkinsfiles/master/python"
      - name: Upload test setup
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbcc-test-setup
          path: |
            pycbcc_test/


  tests-manylinux:
    runs-on: ubuntu-22.04
    needs: [validate-input, build-wheels, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-wheels.result == 'success' || needs.build-wheels.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        arch: ['x86_64', 'aarch64']
        api: ["acouchbase", "couchbase"]
    steps:
      - name: Set up QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup
          path: pycbcc
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-artifact-manylinux-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          run-id: ${{ inputs.wheels_run_id != '' && inputs.wheels_run_id || needs.build-wheels.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: pycbcc
      - name: Run couchbase_columnar unit tests in docker
        if: ${{ matrix.api == 'couchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-slim-bullseye
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apt-get update && apt-get install -y jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_couchbase and pycbcc_unit' -p no:asyncio -p no:warnings -vv -rA
      - name: Run couchbase_columnar integration tests in docker
        if: ${{ inputs.test_input != '' && matrix.api == 'couchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-slim-bullseye
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apt-get update && apt-get install -y jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_couchbase and pycbcc_integration' -p no:asyncio -p no:warnings -vv -rA
      - name: Run acouchbase_columnar unit tests in docker
        if: ${{ matrix.api == 'acouchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-slim-bullseye
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apt-get update && apt-get install -y jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_acouchbase and pycbcc_unit' -p no:warnings -vv -rA
      - name: Run acouchbase_columnar integration tests in docker
        if: ${{ inputs.test_input != '' && matrix.api == 'acouchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-slim-bullseye
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apt-get update && apt-get install -y jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_acouchbase and pycbcc_integration' -p no:warnings -vv -rA

  tests-musllinux:
    runs-on: ubuntu-22.04
    needs: [validate-input, build-wheels, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-wheels.result == 'success' || needs.build-wheels.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        arch: ['x86_64']
        api: ["acouchbase", "couchbase"]
    steps:
      - name: Set up QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup
          path: pycbcc
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-artifact-musllinux-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          run-id: ${{ inputs.wheels_run_id != '' && inputs.wheels_run_id || needs.build-wheels.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: pycbcc
      - name: Run couchbase_columnar unit tests in docker
        if: ${{ matrix.api == 'couchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine3.19
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apk update && apk add --no-cache jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_couchbase and pycbcc_unit' -p no:asyncio -p no:warnings -vv -rA
      - name: Run couchbase_columnar integration tests in docker
        if: ${{ inputs.test_input != '' && matrix.api == 'couchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine3.19
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apk update && apk add --no-cache jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_couchbase and pycbcc_integration' -p no:asyncio -p no:warnings -vv -rA
      - name: Run acouchbase_columnar unit tests in docker
        if: ${{ matrix.api == 'acouchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine3.19
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apk update && apk add --no-cache jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_acouchbase and pycbcc_unit' -p no:warnings -vv -rA
      - name: Run acouchbase_columnar integration tests in docker
        if: ${{ inputs.test_input != '' && matrix.api == 'acouchbase' }}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine3.19
          options: >-
            --platform linux/${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
          run: |
            apk update && apk add --no-cache jq
            python -m pip install --upgrade pip setuptools wheel
            cd pycbcc
            ls -alh
            python -m pip install -r dev_reqs.txt
            WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
            echo "WHEEL_NAME=$WHEEL_NAME"
            python -m pip install $WHEEL_NAME
            python -m pip list
            python -m pytest -m 'pycbcc_acouchbase and pycbcc_integration' -p no:warnings -vv -rA

  tests-macos:
    needs: [validate-input, build-wheels, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-wheels.result == 'success' || needs.build-wheels.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-13", "macos-14"]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        arch: ["x86_64", "arm64"]
        api: ["acouchbase", "couchbase"]
        exclude:
          - os: macos-13
            arch: arm64
          - os: macos-14
            arch: x86_64
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup
          path: pycbcc
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-artifact-macos-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          run-id: ${{ inputs.wheels_run_id != '' && inputs.wheels_run_id || needs.build-wheels.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: pycbcc
      - name: Install dependencies and SDK wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel
          ls -alh
          WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
          echo "WHEEL_NAME=$WHEEL_NAME"
          python -m pip install $WHEEL_NAME
      - name: Run couchbase_columnar unit tests
        if: ${{ matrix.api == 'couchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_couchbase and pycbcc_unit' -p no:asyncio -p no:warnings -vv -rA
      - name: Run couchbase_columnar integration tests
        if: ${{ inputs.test_input != '' && matrix.api == 'couchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_couchbase and pycbcc_integration' -p no:asyncio -p no:warnings -vv -rA
      - name: Run acouchbase_columnar unit tests
        if: ${{ matrix.api == 'acouchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_acouchbase and pycbcc_unit' -p no:warnings -vv -rA
      - name: Run acouchbase_columnar integration tests
        if: ${{ inputs.test_input != '' && matrix.api == 'acouchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_acouchbase and pycbcc_integration' -p no:warnings -vv -rA


  tests-windows:
    needs: [validate-input, build-wheels, test-setup]
    if: |
      always()
      && needs.validate-input.result == 'success'
      && needs.test-setup.result == 'success'
      && (needs.build-wheels.result == 'success' || needs.build-wheels.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-2022"]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        arch: ["AMD64"]
        api: ["acouchbase", "couchbase"]
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup
          path: pycbcc
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-artifact-windows-${{ matrix.arch }}-python${{ matrix.python-version }}-wheel
          run-id: ${{ inputs.wheels_run_id != '' && inputs.wheels_run_id || needs.build-wheels.outputs.workflow_run_id }}
          github-token: ${{ github.token }}
          path: pycbcc
      - name: Install dependencies and SDK wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel
          dir /a
          cd pycbcc
          $env:WHEEL_NAME=$(gci *.whl).Name
          gci $env:WHEEL_NAME
          python -m pip install $env:WHEEL_NAME
      - name: Run couchbase_columnar unit tests
        if: ${{ matrix.api == 'couchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_couchbase and pycbcc_unit' -p no:asyncio -p no:warnings -vv -rA
      - name: Run couchbase_columnar integration tests
        if: ${{ inputs.test_input != '' && matrix.api == 'couchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_couchbase and pycbcc_integration' -p no:asyncio -p no:warnings -vv -rA
      - name: Run acouchbase_columnar unit tests
        if: ${{ matrix.api == 'acouchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_acouchbase and pycbcc_unit' -p no:warnings -vv -rA
      - name: Run acouchbase_columnar integration tests
        if: ${{ inputs.test_input != '' && matrix.api == 'acouchbase' }}
        run: |
          cd pycbcc
          python -m pip install -r dev_reqs.txt
          python -m pip list
          python -m pytest -m 'pycbcc_acouchbase and pycbcc_integration' -p no:warnings -vv -rA
