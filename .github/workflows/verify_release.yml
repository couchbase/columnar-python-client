name: verify_release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version of the SDK to install and verify."
        required: true
        default: ""
        type: string
      packaging_index:
        description: "The packaging index to download the SDK from."
        required: true
        default: "PYPI"
        type: choice
        options:
          - PYPI
          - TEST_PYPI
      test_input:
        description: "JSON formatted object representing test input."
        required: true
        default: ""
        type: string
  workflow_call:
    inputs:
      version:
        description: "The version of the SDK to install and verify."
        required: true
        default: ""
        type: string
      packaging_index:
        description: "The packaging index to download the SDK from."
        required: true
        default: ""
        type: string
      test_input:
        description: "JSON formatted object representing test input."
        required: true
        default: ""
        type: string


env:
  DEFAULT_PYTHON: "3.9"


jobs:
  validate-input:
    runs-on: ubuntu-22.04
    steps:
      - name: Verify SDK version
        if: inputs.version == ''
        run: |
          echo "::error Must provide a valid SDK version."
          exit 1
      - name: Verify packaging index
        if: inputs.packaging_index == ''
        run: |
          echo "::error Must provide a valid packaging index."
          exit 1
      - name: Verify test input has been provided
        if: inputs.test_input == ''
        run: |
          echo "::error Must provide a test input JSON object."
          exit 1
      - name: Validate host
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_HOST == ''}}
        run: |
          echo "::error must provide PYCBCC_HOST."
          exit 1
      - name: Validate user
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_USERNAME == '' }}
        run: |
          echo "::error must provide PYCBCC_USERNAME."
          exit 1
      - name: Validate password
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_PASSWORD == '' }}
        run: |
          echo "::error must provide PYCBCC_PASSWORD."
          exit 1
      - name: Validate FQDN
        if: ${{ inputs.test_input != '' && fromJSON(inputs.test_input).PYCBCC_FQDN == '' }}
        run: |
          echo "::error must provide PYCBCC_FQDN."
          exit 1


  test-setup:
    runs-on: ubuntu-22.04
    needs: validate-input
    steps:
      - name: Setup Python
        if: ${{ inputs.test_input != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Build test_config.ini
        if: ${{ inputs.test_input != '' }}
        run: |
          export $(echo '${{ inputs.test_input }}' | jq -r '. | to_entries[] | join("=")')
          echo "Output environment"
          env | grep PYCBCC
          curl -o build_test_config.py ${CI_SCRIPTS_URL}/ci_scripts/build_test_config.py
          python build_test_config.py
          echo "Output test_config.ini"
          cat test_config.ini
          mkdir pycbcc_test
          mv test_config.ini pycbcc_test
        env:
          CI_SCRIPTS_URL: "https://raw.githubusercontent.com/couchbaselabs/sdkbuild-jenkinsfiles/master/python"
      - name: Download quick test script
        run: |
          cd pycbcc_test
          curl -o columnar_async_quick_test.py ${CI_SCRIPTS_URL}/release_smoke_tests/columnar_async_quick_test.py
          curl -o columnar_quick_test.py ${CI_SCRIPTS_URL}/release_smoke_tests/columnar_quick_test.py
        env:
          CI_SCRIPTS_URL: "https://raw.githubusercontent.com/couchbaselabs/sdkbuild-jenkinsfiles/master/python"
      - name: Upload test setup
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbcc-test-setup-${{ inputs.packaging_index  == 'TEST_PYPI' && 'test-pypi' || 'pypi'}}
          path: |
            pycbcc_test/


  verify-linux:
    runs-on: ${{ matrix.os }}
    needs: test-setup
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04", "ubuntu-22.04-arm"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        api: ["acouchbase", "couchbase"]
    steps:
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup-${{ inputs.packaging_index  == 'TEST_PYPI' && 'test-pypi' || 'pypi'}}
          path: pycbcc
      - name: Run test PyPI verification tests
        env:
          SDK_VERSION: ${{ inputs.version }}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple couchbase-columnar==$SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py
      - name: Run PyPI verification tests
        if: ${{ inputs.packaging_index  == 'PYPI'}}
        env:
          SDK_VERSION: ${{ inputs.version }}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install couchbase-columnar==$SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py


  verify-musllinux:
    needs: test-setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04']
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup-${{ inputs.packaging_index  == 'TEST_PYPI' && 'test-pypi' || 'pypi'}}
          path: pycbcc
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/docker_python_image.tar # Path to store the image archive
          key: docker-image-python-${{ matrix.python-version }}-alpine
      - name: Pull and save image if not cached
        run: |
          if [ ! -f /tmp/docker_python_image.tar ]; then
            docker pull python:${{ matrix.python-version }}-alpine
            docker save python:${{ matrix.python-version }}-alpine -o /tmp/docker_python_image.tar
          fi
      - name: Load image if cached
        run: |
          if [ -f /tmp/docker_python_image.tar ]; then
            docker load -i /tmp/docker_python_image.tar
          fi
      - name: Run test PyPI verification tests in Docker
        if: ${{ inputs.packaging_index  == 'TEST_PYPI'}}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine
          options: >-
            --platform linux/${{ matrix.os == 'ubuntu-22.04-arm' && 'arm64' || 'amd64' }}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
            -e SDK_VERSION=${{ inputs.version }}
          run: |
            env
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple couchbase-columnar==$SDK_VERSION -v -v -v
            python -m pip list
            cd pycbcc
            python columnar_quick_test.py
            python columnar_async_quick_test.py
      - name: Run PyPI verification tests in Docker
        if: ${{ inputs.packaging_index  == 'PYPI'}}
        uses: addnab/docker-run-action@v3
        with:
          image: python:${{ matrix.python-version }}-alpine
          options: >-
            --platform linux/${{ matrix.os == 'ubuntu-22.04-arm' && 'arm64' || 'amd64' }}
            -v ${{ github.workspace }}/pycbcc:/pycbcc
            -e SDK_VERSION=${{ inputs.version }}
          run: |
            env
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install couchbase-columnar==$SDK_VERSION -v -v -v
            python -m pip list
            cd pycbcc
            python columnar_quick_test.py
            python columnar_async_quick_test.py


  verify-macos:
    needs: test-setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-13", "macos-14"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup-${{ inputs.packaging_index  == 'TEST_PYPI' && 'test-pypi' || 'pypi'}}
          path: pycbcc
      - name: Run test PyPI verification tests
        if: ${{ inputs.packaging_index  == 'TEST_PYPI'}}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple couchbase-columnar==$SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py
        env:
          SDK_VERSION: ${{ inputs.version }}
      - name: Run PyPI verification tests
        if: ${{ inputs.packaging_index  == 'PYPI'}}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install couchbase-columnar==$SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py
        env:
          SDK_VERSION: ${{ inputs.version }}


  verify-windows:
    needs: test-setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        arch: ["AMD64"]
    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Download test setup
        uses: actions/download-artifact@v4
        with:
          name: pycbcc-test-setup-${{ inputs.packaging_index  == 'TEST_PYPI' && 'test-pypi' || 'pypi'}}
          path: pycbcc
      - name: Run test PyPI verification tests
        if: ${{ inputs.packaging_index  == 'TEST_PYPI'}}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple couchbase-columnar==$env:SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py
        env:
          SDK_VERSION: ${{ inputs.version }}
      - name: Run PyPI verification tests
        if: ${{ inputs.packaging_index  == 'PYPI'}}
        run: |
          env
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install couchbase-columnar==$env:SDK_VERSION -v -v -v
          python -m pip list
          cd pycbcc
          python columnar_quick_test.py
          python columnar_async_quick_test.py
        env:
          SDK_VERSION: ${{ inputs.version }}
